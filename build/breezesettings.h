// This file is generated by kconfig_compiler_kf6 from breezesettingsdata.kcfg.
// All changes you do to this file will be lost.
#ifndef BREEZE_INTERNALSETTINGS_H
#define BREEZE_INTERNALSETTINGS_H

#include <qglobal.h>
#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

namespace Breeze {

class InternalSettings : public KConfigSkeleton
{
  public:
    enum EnumShadowSize { ShadowNone, ShadowSmall, ShadowMedium, ShadowLarge, ShadowVeryLarge };
    enum EnumBorderSize { BorderNone, BorderNoSides, BorderTiny, BorderNormal, BorderLarge, BorderVeryLarge, BorderHuge, BorderVeryHuge, BorderOversized };
    enum EnumTitleAlignment { AlignLeft, AlignCenter, AlignCenterFullWidth, AlignRight };
    enum EnumButtonSize { ButtonTiny, ButtonSmall, ButtonDefault, ButtonLarge, ButtonVeryLarge };
    enum EnumExceptionType { ExceptionWindowClassName, ExceptionWindowTitle };

    InternalSettings( );
    ~InternalSettings() override;

    /**
      Set ShadowStrength
    */
    void setShadowStrength( int v )
    {
      if (v < 25)
      {
        qDebug() << "setShadowStrength: value " << v << " is less than the minimum value of 25";
        v = 25;
      }

      if (v > 255)
      {
        qDebug() << "setShadowStrength: value " << v << " is greater than the maximum value of 255";
        v = 255;
      }

      if (!isShadowStrengthImmutable())
        mShadowStrength = v;
    }

    /**
      Get ShadowStrength
    */
    int shadowStrength() const
    {
      return mShadowStrength;
    }

    /**
      Is ShadowStrength Immutable
    */
    bool isShadowStrengthImmutable() const
    {
      return isImmutable( QStringLiteral( "ShadowStrength" ) );
    }

    /**
      Set ShadowSize
    */
    void setShadowSize( int v )
    {
      if (!isShadowSizeImmutable())
        mShadowSize = v;
    }

    /**
      Get ShadowSize
    */
    int shadowSize() const
    {
      return mShadowSize;
    }

    /**
      Is ShadowSize Immutable
    */
    bool isShadowSizeImmutable() const
    {
      return isImmutable( QStringLiteral( "ShadowSize" ) );
    }

    /**
      Set ShadowColor
    */
    void setShadowColor( const QColor & v )
    {
      if (!isShadowColorImmutable())
        mShadowColor = v;
    }

    /**
      Get ShadowColor
    */
    QColor shadowColor() const
    {
      return mShadowColor;
    }

    /**
      Is ShadowColor Immutable
    */
    bool isShadowColorImmutable() const
    {
      return isImmutable( QStringLiteral( "ShadowColor" ) );
    }

    /**
      Set OutlineCloseButton
    */
    void setOutlineCloseButton( bool v )
    {
      if (!isOutlineCloseButtonImmutable())
        mOutlineCloseButton = v;
    }

    /**
      Get OutlineCloseButton
    */
    bool outlineCloseButton() const
    {
      return mOutlineCloseButton;
    }

    /**
      Is OutlineCloseButton Immutable
    */
    bool isOutlineCloseButtonImmutable() const
    {
      return isImmutable( QStringLiteral( "OutlineCloseButton" ) );
    }

    /**
      Set BorderSize
    */
    void setBorderSize( int v )
    {
      if (!isBorderSizeImmutable())
        mBorderSize = v;
    }

    /**
      Get BorderSize
    */
    int borderSize() const
    {
      return mBorderSize;
    }

    /**
      Is BorderSize Immutable
    */
    bool isBorderSizeImmutable() const
    {
      return isImmutable( QStringLiteral( "BorderSize" ) );
    }

    /**
      Set TitleAlignment
    */
    void setTitleAlignment( int v )
    {
      if (!isTitleAlignmentImmutable())
        mTitleAlignment = v;
    }

    /**
      Get TitleAlignment
    */
    int titleAlignment() const
    {
      return mTitleAlignment;
    }

    /**
      Is TitleAlignment Immutable
    */
    bool isTitleAlignmentImmutable() const
    {
      return isImmutable( QStringLiteral( "TitleAlignment" ) );
    }

    /**
      Set ButtonSize
    */
    void setButtonSize( int v )
    {
      if (!isButtonSizeImmutable())
        mButtonSize = v;
    }

    /**
      Get ButtonSize
    */
    int buttonSize() const
    {
      return mButtonSize;
    }

    /**
      Is ButtonSize Immutable
    */
    bool isButtonSizeImmutable() const
    {
      return isImmutable( QStringLiteral( "ButtonSize" ) );
    }

    /**
      Set ButtonSpacing
    */
    void setButtonSpacing( int v )
    {
      if (!isButtonSpacingImmutable())
        mButtonSpacing = v;
    }

    /**
      Get ButtonSpacing
    */
    int buttonSpacing() const
    {
      return mButtonSpacing;
    }

    /**
      Is ButtonSpacing Immutable
    */
    bool isButtonSpacingImmutable() const
    {
      return isImmutable( QStringLiteral( "ButtonSpacing" ) );
    }

    /**
      Set ExtraTitleMargin
    */
    void setExtraTitleMargin( int v )
    {
      if (!isExtraTitleMarginImmutable())
        mExtraTitleMargin = v;
    }

    /**
      Get ExtraTitleMargin
    */
    int extraTitleMargin() const
    {
      return mExtraTitleMargin;
    }

    /**
      Is ExtraTitleMargin Immutable
    */
    bool isExtraTitleMarginImmutable() const
    {
      return isImmutable( QStringLiteral( "ExtraTitleMargin" ) );
    }

    /**
      Set DrawBorderOnMaximizedWindows
    */
    void setDrawBorderOnMaximizedWindows( bool v )
    {
      if (!isDrawBorderOnMaximizedWindowsImmutable())
        mDrawBorderOnMaximizedWindows = v;
    }

    /**
      Get DrawBorderOnMaximizedWindows
    */
    bool drawBorderOnMaximizedWindows() const
    {
      return mDrawBorderOnMaximizedWindows;
    }

    /**
      Is DrawBorderOnMaximizedWindows Immutable
    */
    bool isDrawBorderOnMaximizedWindowsImmutable() const
    {
      return isImmutable( QStringLiteral( "DrawBorderOnMaximizedWindows" ) );
    }

    /**
      Set MacOSButtons
    */
    void setMacOSButtons( bool v )
    {
      if (!isMacOSButtonsImmutable())
        mMacOSButtons = v;
    }

    /**
      Get MacOSButtons
    */
    bool macOSButtons() const
    {
      return mMacOSButtons;
    }

    /**
      Is MacOSButtons Immutable
    */
    bool isMacOSButtonsImmutable() const
    {
      return isImmutable( QStringLiteral( "MacOSButtons" ) );
    }

    /**
      Set BackgroundOpacity
    */
    void setBackgroundOpacity( int v )
    {
      if (!isBackgroundOpacityImmutable())
        mBackgroundOpacity = v;
    }

    /**
      Get BackgroundOpacity
    */
    int backgroundOpacity() const
    {
      return mBackgroundOpacity;
    }

    /**
      Is BackgroundOpacity Immutable
    */
    bool isBackgroundOpacityImmutable() const
    {
      return isImmutable( QStringLiteral( "BackgroundOpacity" ) );
    }

    /**
      Set DrawBackgroundGradient
    */
    void setDrawBackgroundGradient( bool v )
    {
      if (!isDrawBackgroundGradientImmutable())
        mDrawBackgroundGradient = v;
    }

    /**
      Get DrawBackgroundGradient
    */
    bool drawBackgroundGradient() const
    {
      return mDrawBackgroundGradient;
    }

    /**
      Is DrawBackgroundGradient Immutable
    */
    bool isDrawBackgroundGradientImmutable() const
    {
      return isImmutable( QStringLiteral( "DrawBackgroundGradient" ) );
    }

    /**
      Set BackgroundGradientIntensity
    */
    void setBackgroundGradientIntensity( int v )
    {
      if (!isBackgroundGradientIntensityImmutable())
        mBackgroundGradientIntensity = v;
    }

    /**
      Get BackgroundGradientIntensity
    */
    int backgroundGradientIntensity() const
    {
      return mBackgroundGradientIntensity;
    }

    /**
      Is BackgroundGradientIntensity Immutable
    */
    bool isBackgroundGradientIntensityImmutable() const
    {
      return isImmutable( QStringLiteral( "BackgroundGradientIntensity" ) );
    }

    /**
      Set TitleBarFont
    */
    void setTitleBarFont( const QString & v )
    {
      if (!isTitleBarFontImmutable())
        mTitleBarFont = v;
    }

    /**
      Get TitleBarFont
    */
    QString titleBarFont() const
    {
      return mTitleBarFont;
    }

    /**
      Is TitleBarFont Immutable
    */
    bool isTitleBarFontImmutable() const
    {
      return isImmutable( QStringLiteral( "TitleBarFont" ) );
    }

    /**
      Set AnimationsEnabled
    */
    void setAnimationsEnabled( bool v )
    {
      if (!isAnimationsEnabledImmutable())
        mAnimationsEnabled = v;
    }

    /**
      Get AnimationsEnabled
    */
    bool animationsEnabled() const
    {
      return mAnimationsEnabled;
    }

    /**
      Is AnimationsEnabled Immutable
    */
    bool isAnimationsEnabledImmutable() const
    {
      return isImmutable( QStringLiteral( "AnimationsEnabled" ) );
    }

    /**
      Set AnimationsDuration
    */
    void setAnimationsDuration( int v )
    {
      if (!isAnimationsDurationImmutable())
        mAnimationsDuration = v;
    }

    /**
      Get AnimationsDuration
    */
    int animationsDuration() const
    {
      return mAnimationsDuration;
    }

    /**
      Is AnimationsDuration Immutable
    */
    bool isAnimationsDurationImmutable() const
    {
      return isImmutable( QStringLiteral( "AnimationsDuration" ) );
    }

    /**
      Set HideTitleBar
    */
    void setHideTitleBar( bool v )
    {
      if (!isHideTitleBarImmutable())
        mHideTitleBar = v;
    }

    /**
      Get HideTitleBar
    */
    bool hideTitleBar() const
    {
      return mHideTitleBar;
    }

    /**
      Is HideTitleBar Immutable
    */
    bool isHideTitleBarImmutable() const
    {
      return isImmutable( QStringLiteral( "HideTitleBar" ) );
    }

    /**
      Set OpaqueTitleBar
    */
    void setOpaqueTitleBar( bool v )
    {
      if (!isOpaqueTitleBarImmutable())
        mOpaqueTitleBar = v;
    }

    /**
      Get OpaqueTitleBar
    */
    bool opaqueTitleBar() const
    {
      return mOpaqueTitleBar;
    }

    /**
      Is OpaqueTitleBar Immutable
    */
    bool isOpaqueTitleBarImmutable() const
    {
      return isImmutable( QStringLiteral( "OpaqueTitleBar" ) );
    }

    /**
      Set OpacityOverride
    */
    void setOpacityOverride( int v )
    {
      if (!isOpacityOverrideImmutable())
        mOpacityOverride = v;
    }

    /**
      Get OpacityOverride
    */
    int opacityOverride() const
    {
      return mOpacityOverride;
    }

    /**
      Is OpacityOverride Immutable
    */
    bool isOpacityOverrideImmutable() const
    {
      return isImmutable( QStringLiteral( "OpacityOverride" ) );
    }

    /**
      Set FlatTitleBar
    */
    void setFlatTitleBar( bool v )
    {
      if (!isFlatTitleBarImmutable())
        mFlatTitleBar = v;
    }

    /**
      Get FlatTitleBar
    */
    bool flatTitleBar() const
    {
      return mFlatTitleBar;
    }

    /**
      Is FlatTitleBar Immutable
    */
    bool isFlatTitleBarImmutable() const
    {
      return isImmutable( QStringLiteral( "FlatTitleBar" ) );
    }

    /**
      Set IsDialog
    */
    void setIsDialog( bool v )
    {
      if (!isIsDialogImmutable())
        mIsDialog = v;
    }

    /**
      Get IsDialog
    */
    bool isDialog() const
    {
      return mIsDialog;
    }

    /**
      Is IsDialog Immutable
    */
    bool isIsDialogImmutable() const
    {
      return isImmutable( QStringLiteral( "IsDialog" ) );
    }

    /**
      Set ExceptionType
    */
    void setExceptionType( int v )
    {
      if (!isExceptionTypeImmutable())
        mExceptionType = v;
    }

    /**
      Get ExceptionType
    */
    int exceptionType() const
    {
      return mExceptionType;
    }

    /**
      Is ExceptionType Immutable
    */
    bool isExceptionTypeImmutable() const
    {
      return isImmutable( QStringLiteral( "ExceptionType" ) );
    }

    /**
      Set ExceptionPattern
    */
    void setExceptionPattern( const QString & v )
    {
      if (!isExceptionPatternImmutable())
        mExceptionPattern = v;
    }

    /**
      Get ExceptionPattern
    */
    QString exceptionPattern() const
    {
      return mExceptionPattern;
    }

    /**
      Is ExceptionPattern Immutable
    */
    bool isExceptionPatternImmutable() const
    {
      return isImmutable( QStringLiteral( "ExceptionPattern" ) );
    }

    /**
      Set Enabled
    */
    void setEnabled( bool v )
    {
      if (!isEnabledImmutable())
        mEnabled = v;
    }

    /**
      Get Enabled
    */
    bool enabled() const
    {
      return mEnabled;
    }

    /**
      Is Enabled Immutable
    */
    bool isEnabledImmutable() const
    {
      return isImmutable( QStringLiteral( "Enabled" ) );
    }

    /**
      Set Mask
    */
    void setMask( int v )
    {
      if (!isMaskImmutable())
        mMask = v;
    }

    /**
      Get Mask
    */
    int mask() const
    {
      return mMask;
    }

    /**
      Is Mask Immutable
    */
    bool isMaskImmutable() const
    {
      return isImmutable( QStringLiteral( "Mask" ) );
    }

  protected:

    // Common
    int mShadowStrength;
    int mShadowSize;
    QColor mShadowColor;
    bool mOutlineCloseButton;

    // Windeco
    int mBorderSize;
    int mTitleAlignment;
    int mButtonSize;
    int mButtonSpacing;
    int mExtraTitleMargin;
    bool mDrawBorderOnMaximizedWindows;
    bool mMacOSButtons;
    int mBackgroundOpacity;
    bool mDrawBackgroundGradient;
    int mBackgroundGradientIntensity;
    QString mTitleBarFont;
    bool mAnimationsEnabled;
    int mAnimationsDuration;
    bool mHideTitleBar;
    bool mOpaqueTitleBar;
    int mOpacityOverride;
    bool mFlatTitleBar;
    bool mIsDialog;
    int mExceptionType;
    QString mExceptionPattern;
    bool mEnabled;
    int mMask;

  private:
};

}

#endif

