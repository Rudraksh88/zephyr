// This file is generated by kconfig_compiler_kf6 from breezesettingsdata.kcfg.
// All changes you do to this file will be lost.

#include "breezesettings.h"

using namespace Breeze;

InternalSettings::InternalSettings( )
  : KConfigSkeleton( QStringLiteral( "breezerc" ) )
{
  setCurrentGroup( QStringLiteral( "Common" ) );

  KConfigSkeleton::ItemInt  *itemShadowStrength;
  itemShadowStrength = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "ShadowStrength" ), mShadowStrength, 255 );
  itemShadowStrength->setMinValue(25);
  itemShadowStrength->setMaxValue(255);
  addItem( itemShadowStrength, QStringLiteral( "ShadowStrength" ) );
  QList<KConfigSkeleton::ItemEnum::Choice> valuesShadowSize;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ShadowNone");
    valuesShadowSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ShadowSmall");
    valuesShadowSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ShadowMedium");
    valuesShadowSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ShadowLarge");
    valuesShadowSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ShadowVeryLarge");
    valuesShadowSize.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemShadowSize;
  itemShadowSize = new KConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "ShadowSize" ), mShadowSize, valuesShadowSize, ShadowLarge );
  addItem( itemShadowSize, QStringLiteral( "ShadowSize" ) );
  KConfigSkeleton::ItemColor  *itemShadowColor;
  itemShadowColor = new KConfigSkeleton::ItemColor( currentGroup(), QStringLiteral( "ShadowColor" ), mShadowColor, QColor( 0, 0, 0 ) );
  addItem( itemShadowColor, QStringLiteral( "ShadowColor" ) );
  KConfigSkeleton::ItemBool  *itemOutlineCloseButton;
  itemOutlineCloseButton = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "OutlineCloseButton" ), mOutlineCloseButton, false );
  addItem( itemOutlineCloseButton, QStringLiteral( "OutlineCloseButton" ) );

  setCurrentGroup( QStringLiteral( "Windeco" ) );

  QList<KConfigSkeleton::ItemEnum::Choice> valuesBorderSize;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("BorderNone");
    valuesBorderSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("BorderNoSides");
    valuesBorderSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("BorderTiny");
    valuesBorderSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("BorderNormal");
    valuesBorderSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("BorderLarge");
    valuesBorderSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("BorderVeryLarge");
    valuesBorderSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("BorderHuge");
    valuesBorderSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("BorderVeryHuge");
    valuesBorderSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("BorderOversized");
    valuesBorderSize.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemBorderSize;
  itemBorderSize = new KConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "BorderSize" ), mBorderSize, valuesBorderSize, BorderNone );
  addItem( itemBorderSize, QStringLiteral( "BorderSize" ) );
  QList<KConfigSkeleton::ItemEnum::Choice> valuesTitleAlignment;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("AlignLeft");
    valuesTitleAlignment.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("AlignCenter");
    valuesTitleAlignment.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("AlignCenterFullWidth");
    valuesTitleAlignment.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("AlignRight");
    valuesTitleAlignment.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemTitleAlignment;
  itemTitleAlignment = new KConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "TitleAlignment" ), mTitleAlignment, valuesTitleAlignment, AlignCenterFullWidth );
  addItem( itemTitleAlignment, QStringLiteral( "TitleAlignment" ) );
  QList<KConfigSkeleton::ItemEnum::Choice> valuesButtonSize;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ButtonTiny");
    valuesButtonSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ButtonSmall");
    valuesButtonSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ButtonDefault");
    valuesButtonSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ButtonLarge");
    valuesButtonSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ButtonVeryLarge");
    valuesButtonSize.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemButtonSize;
  itemButtonSize = new KConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "ButtonSize" ), mButtonSize, valuesButtonSize, ButtonDefault );
  addItem( itemButtonSize, QStringLiteral( "ButtonSize" ) );
  KConfigSkeleton::ItemInt  *itemButtonSpacing;
  itemButtonSpacing = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "ButtonSpacing" ), mButtonSpacing, 6 );
  addItem( itemButtonSpacing, QStringLiteral( "ButtonSpacing" ) );
  KConfigSkeleton::ItemInt  *itemExtraTitleMargin;
  itemExtraTitleMargin = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "ExtraTitleMargin" ), mExtraTitleMargin, 0 );
  addItem( itemExtraTitleMargin, QStringLiteral( "ExtraTitleMargin" ) );
  KConfigSkeleton::ItemBool  *itemDrawBorderOnMaximizedWindows;
  itemDrawBorderOnMaximizedWindows = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "DrawBorderOnMaximizedWindows" ), mDrawBorderOnMaximizedWindows, false );
  addItem( itemDrawBorderOnMaximizedWindows, QStringLiteral( "DrawBorderOnMaximizedWindows" ) );
  KConfigSkeleton::ItemBool  *itemMacOSButtons;
  itemMacOSButtons = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "MacOSButtons" ), mMacOSButtons, true );
  addItem( itemMacOSButtons, QStringLiteral( "MacOSButtons" ) );
  KConfigSkeleton::ItemInt  *itemBackgroundOpacity;
  itemBackgroundOpacity = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "BackgroundOpacity" ), mBackgroundOpacity, 100 );
  addItem( itemBackgroundOpacity, QStringLiteral( "BackgroundOpacity" ) );
  KConfigSkeleton::ItemBool  *itemDrawBackgroundGradient;
  itemDrawBackgroundGradient = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "DrawBackgroundGradient" ), mDrawBackgroundGradient, true );
  addItem( itemDrawBackgroundGradient, QStringLiteral( "DrawBackgroundGradient" ) );
  KConfigSkeleton::ItemInt  *itemBackgroundGradientIntensity;
  itemBackgroundGradientIntensity = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "BackgroundGradientIntensity" ), mBackgroundGradientIntensity, 20 );
  addItem( itemBackgroundGradientIntensity, QStringLiteral( "BackgroundGradientIntensity" ) );
  KConfigSkeleton::ItemString  *itemTitleBarFont;
  itemTitleBarFont = new KConfigSkeleton::ItemString( currentGroup(), QStringLiteral( "TitleBarFont" ), mTitleBarFont );
  addItem( itemTitleBarFont, QStringLiteral( "TitleBarFont" ) );
  KConfigSkeleton::ItemBool  *itemAnimationsEnabled;
  itemAnimationsEnabled = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "AnimationsEnabled" ), mAnimationsEnabled, true );
  addItem( itemAnimationsEnabled, QStringLiteral( "AnimationsEnabled" ) );
  KConfigSkeleton::ItemInt  *itemAnimationsDuration;
  itemAnimationsDuration = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "AnimationsDuration" ), mAnimationsDuration, 150 );
  addItem( itemAnimationsDuration, QStringLiteral( "AnimationsDuration" ) );
  KConfigSkeleton::ItemBool  *itemHideTitleBar;
  itemHideTitleBar = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "HideTitleBar" ), mHideTitleBar, false );
  addItem( itemHideTitleBar, QStringLiteral( "HideTitleBar" ) );
  KConfigSkeleton::ItemBool  *itemOpaqueTitleBar;
  itemOpaqueTitleBar = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "OpaqueTitleBar" ), mOpaqueTitleBar, false );
  addItem( itemOpaqueTitleBar, QStringLiteral( "OpaqueTitleBar" ) );
  KConfigSkeleton::ItemInt  *itemOpacityOverride;
  itemOpacityOverride = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "OpacityOverride" ), mOpacityOverride, -1 );
  addItem( itemOpacityOverride, QStringLiteral( "OpacityOverride" ) );
  KConfigSkeleton::ItemBool  *itemFlatTitleBar;
  itemFlatTitleBar = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "FlatTitleBar" ), mFlatTitleBar, false );
  addItem( itemFlatTitleBar, QStringLiteral( "FlatTitleBar" ) );
  KConfigSkeleton::ItemBool  *itemIsDialog;
  itemIsDialog = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "IsDialog" ), mIsDialog, false );
  addItem( itemIsDialog, QStringLiteral( "IsDialog" ) );
  QList<KConfigSkeleton::ItemEnum::Choice> valuesExceptionType;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ExceptionWindowClassName");
    valuesExceptionType.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QStringLiteral("ExceptionWindowTitle");
    valuesExceptionType.append( choice );
  }
  KConfigSkeleton::ItemEnum  *itemExceptionType;
  itemExceptionType = new KConfigSkeleton::ItemEnum( currentGroup(), QStringLiteral( "ExceptionType" ), mExceptionType, valuesExceptionType, ExceptionWindowClassName );
  addItem( itemExceptionType, QStringLiteral( "ExceptionType" ) );
  KConfigSkeleton::ItemString  *itemExceptionPattern;
  itemExceptionPattern = new KConfigSkeleton::ItemString( currentGroup(), QStringLiteral( "ExceptionPattern" ), mExceptionPattern );
  addItem( itemExceptionPattern, QStringLiteral( "ExceptionPattern" ) );
  KConfigSkeleton::ItemBool  *itemEnabled;
  itemEnabled = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "Enabled" ), mEnabled, true );
  addItem( itemEnabled, QStringLiteral( "Enabled" ) );
  KConfigSkeleton::ItemInt  *itemMask;
  itemMask = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "Mask" ), mMask, 0 );
  addItem( itemMask, QStringLiteral( "Mask" ) );
}

InternalSettings::~InternalSettings()
{
}

